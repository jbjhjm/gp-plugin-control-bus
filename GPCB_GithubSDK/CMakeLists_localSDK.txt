cmake_minimum_required(VERSION 3.21)

set (PROJECT_VERSION "0.0.1")
set (PROJECT_NAME "GPCB")
set (PROJECT_TITLE "GP Control Bus")
string(TIMESTAMP TODAY "%d/%m/%Y")
set (PROJECT_BUILD_DATE ${TODAY})

project(${PROJECT_NAME} VERSION 1.0)

# Define our library including sources, include directories and dependencies
# Must be set BEFORE target_sources!
add_library(${PROJECT_NAME} SHARED)

# Import the SDK from github ============================================================================
# include(FetchContent)
# FetchContent_Declare(
#   gp-sdk
#   GIT_REPOSITORY https://github.com/gigperformer/gp-sdk.git
#   GIT_TAG 756ecd249f1ff00f3d3a5955769408f74c9fa453 # sdk v60
# )
# FetchContent_MakeAvailable(gp-sdk)

# target_sources(${PROJECT_NAME} PRIVATE "${CMAKE_CURRENT_LIST_DIR}/src/LibMain.cpp" "${CMAKE_CURRENT_LIST_DIR}/src/LibMain.h")
# target_link_libraries(${PROJECT_NAME} PRIVATE gigperformer::sdk::cpp)
# target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)

# END Import the SDK from github ============================================================================

# include local SDK ====================================================================================

# To build shared libraries in Windows, we set CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS to TRUE.
# See https://cmake.org/cmake/help/v3.4/variable/CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS.html
# See https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

set (GP_SDK_ROOT ${CMAKE_CURRENT_LIST_DIR}/GP_SDK_v61)

target_sources(${PROJECT_NAME}
  PUBLIC "${CMAKE_CURRENT_LIST_DIR}/src/LibMain.cpp" "${CMAKE_CURRENT_LIST_DIR}/src/LibMain.h"
  PUBLIC ${GP_SDK_ROOT}/interfaces/CPP/GPUtils.cpp
  PUBLIC ${GP_SDK_ROOT}/interfaces/CPP/GigPerformerFunctions.cpp
  PUBLIC ${GP_SDK_ROOT}/interfaces/C/imports.c
  PUBLIC ${GP_SDK_ROOT}/interfaces/C/utils.c
  PUBLIC ${GP_SDK_ROOT}/interfaces/CPP/entry.cpp
  PUBLIC ${GP_SDK_ROOT}/interfaces/CPP/GPMidiMessages.cpp
)
include_directories(${GP_SDK_ROOT})                 # So that the interface files can be found
include_directories(${CMAKE_CURRENT_SOURCE_DIR})    # So that the LibMain.h can be found
include_directories(${CMAKE_CURRENT_LIST_DIR}/src)    # So that the LibMain.h can be found

# END include local SDK ====================================================================================

configure_file (${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/src/version.h @ONLY) 

# Language options: this will be a pure C++20 project
set_target_properties(
  ${PROJECT_NAME}
  PROPERTIES CXX_STANDARD 20
             CXX_STANDARD_REQUIRED ON
             CXX_EXTENSIONS NO
)

# Install the extension on the development machine
install(
  TARGETS ${PROJECT_NAME}
  LIBRARY DESTINATION "${GIG_PERFORMER_EXTENSIONS_DIRECTORY}"
  RUNTIME DESTINATION "${GIG_PERFORMER_EXTENSIONS_DIRECTORY}"
)
